/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tonnie.ipl.xpto.tracking.telemetry.openapi.api;

import com.tonnie.ipl.xpto.tracking.telemetry.openapi.model.CreateTelemetryProfileRequestDto;
import com.tonnie.ipl.xpto.tracking.telemetry.openapi.model.CreateTelemetryProfileResponseDto;
import com.tonnie.ipl.xpto.tracking.telemetry.openapi.model.ErrorResponseDto;
import com.tonnie.ipl.xpto.tracking.telemetry.openapi.model.GetTelemetryProfileResponseDto;
import com.tonnie.ipl.xpto.tracking.telemetry.openapi.model.ListTelemetryProfilesResponseDto;
import com.tonnie.ipl.xpto.tracking.telemetry.openapi.model.UpdateTelemetryProfileRequestDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-05T16:21:28.969664Z[Europe/Lisbon]")
@Validated
@Tag(name = "telemetryprofiles", description = "the telemetryprofiles API")
@RequestMapping("${openapi.iPLTrackingMicroservice.base-path:/tracking}")
public interface TelemetryprofilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /telemetryprofiles/{telemetryprofileId}/sensor/{sensorId} : Add a new sensor to informed TelemetryProfile
     * This operation is used to update some of the TelemetryProfile, including a new sensor.
     *
     * @param telemetryprofileId Unique identifier of the TelemetryProfile in the database (required)
     * @param sensorId Unique identifier of the Sensor in the database (required)
     * @return No Content (status code 204)
     *         or Parameters missing in request or request is malformed. (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or There sensor already exists on informed TelemetryProfile (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "addSensorToTelemetryProfile",
        summary = "Add a new sensor to informed TelemetryProfile",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Parameters missing in request or request is malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "There sensor already exists on informed TelemetryProfile", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/telemetryprofiles/{telemetryprofileId}/sensor/{sensorId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _addSensorToTelemetryProfile(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "telemetryprofileId", description = "Unique identifier of the TelemetryProfile in the database", required = true) @PathVariable("telemetryprofileId") String telemetryprofileId,
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "sensorId", description = "Unique identifier of the Sensor in the database", required = true) @PathVariable("sensorId") String sensorId
    ) {
        return addSensorToTelemetryProfile(telemetryprofileId, sensorId);
    }

    // Override this method
    default  ResponseEntity<Void> addSensorToTelemetryProfile(String telemetryprofileId, String sensorId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /telemetryprofiles : Create new TelemetryProfile
     * This operation is usedto create a new TelemetryProfile on System.
     *
     * @param createTelemetryProfileRequestDto  (required)
     * @return Created (status code 201)
     *         or Parameters missing in request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or There is already a telemetryProfile registered with same name or mail (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "createTelemetryProfile",
        summary = "Create new TelemetryProfile",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateTelemetryProfileResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameters missing in request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "There is already a telemetryProfile registered with same name or mail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/telemetryprofiles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateTelemetryProfileResponseDto> _createTelemetryProfile(
        @Parameter(name = "CreateTelemetryProfileRequestDto", description = "", required = true) @Valid @RequestBody CreateTelemetryProfileRequestDto createTelemetryProfileRequestDto
    ) {
        return createTelemetryProfile(createTelemetryProfileRequestDto);
    }

    // Override this method
    default  ResponseEntity<CreateTelemetryProfileResponseDto> createTelemetryProfile(CreateTelemetryProfileRequestDto createTelemetryProfileRequestDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"telemetryprofileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /telemetryprofiles/{telemetryprofileId} : Delete TelemetryProfile
     * This operation is delete a TelemetryProfile.
     *
     * @param telemetryprofileId Unique identifier of the TelemetryProfile in the database (required)
     * @return No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Delete a telemetryprofile that has vehicles is not allowed. (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "deleteTelemetryProfile",
        summary = "Delete TelemetryProfile",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "Delete a telemetryprofile that has vehicles is not allowed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/telemetryprofiles/{telemetryprofileId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteTelemetryProfile(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "telemetryprofileId", description = "Unique identifier of the TelemetryProfile in the database", required = true) @PathVariable("telemetryprofileId") String telemetryprofileId
    ) {
        return deleteTelemetryProfile(telemetryprofileId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteTelemetryProfile(String telemetryprofileId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /telemetryprofiles/{telemetryprofileId} : Get a single TelemetryProfile&#39;s info
     * This operation is used to retrieve the details of a specific device.
     *
     * @param telemetryprofileId Unique identifier of the TelemetryProfile in the database (required)
     * @return Ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "getTelemetryProfile",
        summary = "Get a single TelemetryProfile's info",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetTelemetryProfileResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/telemetryprofiles/{telemetryprofileId}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetTelemetryProfileResponseDto> _getTelemetryProfile(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "telemetryprofileId", description = "Unique identifier of the TelemetryProfile in the database", required = true) @PathVariable("telemetryprofileId") String telemetryprofileId
    ) {
        return getTelemetryProfile(telemetryprofileId);
    }

    // Override this method
    default  ResponseEntity<GetTelemetryProfileResponseDto> getTelemetryProfile(String telemetryprofileId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"telemetryprofileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"sensors\" : [ { \"minValue\" : 0.0, \"unit\" : \"Km/h\", \"maxValue\" : 255.0, \"name\" : \"Foo bar\", \"sensorId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" }, { \"minValue\" : 0.0, \"unit\" : \"Km/h\", \"maxValue\" : 255.0, \"name\" : \"Foo bar\", \"sensorId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" } ], \"name\" : \"Foo bar\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /telemetryprofiles : Get TelemetryProfiles list
     * This operation is used to retrieve a list of TelemetryProfiles.
     *
     * @return Ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "listTelemetryProfiles",
        summary = "Get TelemetryProfiles list",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListTelemetryProfilesResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/telemetryprofiles",
        produces = { "application/json" }
    )
    default ResponseEntity<ListTelemetryProfilesResponseDto> _listTelemetryProfiles(
        
    ) {
        return listTelemetryProfiles();
    }

    // Override this method
    default  ResponseEntity<ListTelemetryProfilesResponseDto> listTelemetryProfiles() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 50, \"content\" : [ { \"telemetryprofileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"sensors\" : [ { \"minValue\" : 0.0, \"unit\" : \"Km/h\", \"maxValue\" : 255.0, \"name\" : \"Foo bar\", \"sensorId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" }, { \"minValue\" : 0.0, \"unit\" : \"Km/h\", \"maxValue\" : 255.0, \"name\" : \"Foo bar\", \"sensorId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" } ], \"name\" : \"Foo bar\" }, { \"telemetryprofileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"sensors\" : [ { \"minValue\" : 0.0, \"unit\" : \"Km/h\", \"maxValue\" : 255.0, \"name\" : \"Foo bar\", \"sensorId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" }, { \"minValue\" : 0.0, \"unit\" : \"Km/h\", \"maxValue\" : 255.0, \"name\" : \"Foo bar\", \"sensorId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" } ], \"name\" : \"Foo bar\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /telemetryprofiles/{telemetryprofileId}/sensor/{sensorId} : remove a sensor from informed TelemetryProfile
     * This operation is used to update a TelemetryProfile, removing a sensor.
     *
     * @param telemetryprofileId Unique identifier of the TelemetryProfile in the database (required)
     * @param sensorId Unique identifier of the Sensor in the database (required)
     * @return No Content (status code 204)
     *         or Parameters missing in request or request is malformed. (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or There sensor not exists on informed TelemetryProfile (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "removeSensorFromTelemetryProfile",
        summary = "remove a sensor from informed TelemetryProfile",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Parameters missing in request or request is malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "There sensor not exists on informed TelemetryProfile", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/telemetryprofiles/{telemetryprofileId}/sensor/{sensorId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _removeSensorFromTelemetryProfile(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "telemetryprofileId", description = "Unique identifier of the TelemetryProfile in the database", required = true) @PathVariable("telemetryprofileId") String telemetryprofileId,
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "sensorId", description = "Unique identifier of the Sensor in the database", required = true) @PathVariable("sensorId") String sensorId
    ) {
        return removeSensorFromTelemetryProfile(telemetryprofileId, sensorId);
    }

    // Override this method
    default  ResponseEntity<Void> removeSensorFromTelemetryProfile(String telemetryprofileId, String sensorId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /telemetryprofiles/{telemetryprofileId} : Update TelemetryProfile&#39;s attributes
     * This operation is used to update some of the TelemetryProfile&#39;s attributes.
     *
     * @param telemetryprofileId Unique identifier of the TelemetryProfile in the database (required)
     * @param updateTelemetryProfileRequestDto  (required)
     * @return No Content (status code 204)
     *         or Parameters missing in request or request is malformed. For example, the mail is not in the correct format. (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or There is already a TelemetryProfile registered with same name or email (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "updateTelemetryProfile",
        summary = "Update TelemetryProfile's attributes",
        tags = { "TelemetryProfile" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Parameters missing in request or request is malformed. For example, the mail is not in the correct format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "There is already a TelemetryProfile registered with same name or email", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/telemetryprofiles/{telemetryprofileId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _updateTelemetryProfile(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "telemetryprofileId", description = "Unique identifier of the TelemetryProfile in the database", required = true) @PathVariable("telemetryprofileId") String telemetryprofileId,
        @Parameter(name = "UpdateTelemetryProfileRequestDto", description = "", required = true) @Valid @RequestBody UpdateTelemetryProfileRequestDto updateTelemetryProfileRequestDto
    ) {
        return updateTelemetryProfile(telemetryprofileId, updateTelemetryProfileRequestDto);
    }

    // Override this method
    default  ResponseEntity<Void> updateTelemetryProfile(String telemetryprofileId, UpdateTelemetryProfileRequestDto updateTelemetryProfileRequestDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
