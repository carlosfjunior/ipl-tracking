/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tonnie.ipl.xpto.tracking.vehicle.openapi.api;

import com.tonnie.ipl.xpto.tracking.vehicle.openapi.model.CreateVehicleRequestDto;
import com.tonnie.ipl.xpto.tracking.vehicle.openapi.model.CreateVehicleResponseDto;
import com.tonnie.ipl.xpto.tracking.vehicle.openapi.model.ErrorResponseDto;
import com.tonnie.ipl.xpto.tracking.vehicle.openapi.model.GetVehicleResponseDto;
import com.tonnie.ipl.xpto.tracking.vehicle.openapi.model.ListVehiclesResponseDto;
import com.tonnie.ipl.xpto.tracking.vehicle.openapi.model.UpdateVehicleRequestDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-05T14:56:00.318047Z[Europe/Lisbon]")
@Validated
@Tag(name = "vehicles", description = "Vehicle definition")
@RequestMapping("${openapi.iPLTrackingMicroservice.base-path:/tracking}")
public interface VehiclesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /vehicles : Create new Vehicle
     * This operation is usedto create a new Vehicle on System.
     *
     * @param createVehicleRequestDto  (required)
     * @return Created (status code 201)
     *         or Parameters missing in request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or There is already a vehicle registered with same number plate or vin (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "createVehicle",
        summary = "Create new Vehicle",
        tags = { "Vehicle" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateVehicleResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameters missing in request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "There is already a vehicle registered with same number plate or vin", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vehicles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateVehicleResponseDto> _createVehicle(
        @Parameter(name = "CreateVehicleRequestDto", description = "", required = true) @Valid @RequestBody CreateVehicleRequestDto createVehicleRequestDto
    ) {
        return createVehicle(createVehicleRequestDto);
    }

    // Override this method
    default  ResponseEntity<CreateVehicleResponseDto> createVehicle(CreateVehicleRequestDto createVehicleRequestDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"vehicleId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /vehicles/{vehicleId} : Delete Vehicle
     * This operation is delete a Vehicle.
     *
     * @param vehicleId Unique identifier of the Vehicle in the database (required)
     * @return No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Delete a vehicle that has datas is not allowed. (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "deleteVehicle",
        summary = "Delete Vehicle",
        tags = { "Vehicle" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "Delete a vehicle that has datas is not allowed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/vehicles/{vehicleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteVehicle(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "vehicleId", description = "Unique identifier of the Vehicle in the database", required = true) @PathVariable("vehicleId") String vehicleId
    ) {
        return deleteVehicle(vehicleId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteVehicle(String vehicleId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vehicles/{vehicleId} : Get a single Vehicle&#39;s info
     * This operation is used to retrieve the details of a specific device.
     *
     * @param vehicleId Unique identifier of the Vehicle in the database (required)
     * @return Ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "getVehicle",
        summary = "Get a single Vehicle's info",
        tags = { "Vehicle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetVehicleResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vehicles/{vehicleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetVehicleResponseDto> _getVehicle(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "vehicleId", description = "Unique identifier of the Vehicle in the database", required = true) @PathVariable("vehicleId") String vehicleId
    ) {
        return getVehicle(vehicleId);
    }

    // Override this method
    default  ResponseEntity<GetVehicleResponseDto> getVehicle(String vehicleId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"telemetryProfileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"customerOwnerId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"currentDriverId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"color\" : \"Red\", \"vin\" : \"4Y1SL65848Z411439\", \"vehicleId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"numberPlate\" : \"AG-78-RH\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vehicles : Get Vehicles list
     * This operation is used to retrieve a list of Vehicles.
     *
     * @return Ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "listVehicles",
        summary = "Get Vehicles list",
        tags = { "Vehicle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListVehiclesResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vehicles",
        produces = { "application/json" }
    )
    default ResponseEntity<ListVehiclesResponseDto> _listVehicles(
        
    ) {
        return listVehicles();
    }

    // Override this method
    default  ResponseEntity<ListVehiclesResponseDto> listVehicles() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 50, \"content\" : [ { \"telemetryProfileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"customerOwnerId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"currentDriverId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"color\" : \"Red\", \"vin\" : \"4Y1SL65848Z411439\", \"vehicleId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"numberPlate\" : \"AG-78-RH\" }, { \"telemetryProfileId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"customerOwnerId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"currentDriverId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"color\" : \"Red\", \"vin\" : \"4Y1SL65848Z411439\", \"vehicleId\" : \"0af401df-7d7a-1f36-817d-7b0a058d0003\", \"numberPlate\" : \"AG-78-RH\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /vehicles/{vehicleId} : Update Vehicle&#39;s attributes
     * This operation is used to update some of the Vehicle&#39;s attributes.
     *
     * @param vehicleId Unique identifier of the Sensor in the database (required)
     * @param updateVehicleRequestDto  (required)
     * @return No Content (status code 204)
     *         or Parameters missing in request or request is malformed. For example, the mail is not in the correct format. (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or There is already a vehicle registered with same numer plate or vin (status code 409)
     *         or Unexpected errors not mapped to status codes mentioned above (status code 500)
     */
    @Operation(
        operationId = "updateVehicle",
        summary = "Update Vehicle's attributes",
        tags = { "Vehicle" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Parameters missing in request or request is malformed. For example, the mail is not in the correct format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "There is already a vehicle registered with same numer plate or vin", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected errors not mapped to status codes mentioned above", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/vehicles/{vehicleId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _updateVehicle(
        @Pattern(regexp = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Parameter(name = "vehicleId", description = "Unique identifier of the Sensor in the database", required = true) @PathVariable("vehicleId") String vehicleId,
        @Parameter(name = "UpdateVehicleRequestDto", description = "", required = true) @Valid @RequestBody UpdateVehicleRequestDto updateVehicleRequestDto
    ) {
        return updateVehicle(vehicleId, updateVehicleRequestDto);
    }

    // Override this method
    default  ResponseEntity<Void> updateVehicle(String vehicleId, UpdateVehicleRequestDto updateVehicleRequestDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
