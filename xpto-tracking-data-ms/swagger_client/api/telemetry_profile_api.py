# coding: utf-8

"""
    IPL Tracking - Microservice API

    API description for Tracking microservice.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TelemetryProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_sensor_to_telemetry_profile(self, telemetryprofile_id, sensor_id, **kwargs):  # noqa: E501
        """Add a new sensor to informed TelemetryProfile  # noqa: E501

        This operation is used to update some of the TelemetryProfile, including a new sensor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sensor_to_telemetry_profile(telemetryprofile_id, sensor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :param str sensor_id: Unique identifier of the Sensor in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_sensor_to_telemetry_profile_with_http_info(telemetryprofile_id, sensor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_sensor_to_telemetry_profile_with_http_info(telemetryprofile_id, sensor_id, **kwargs)  # noqa: E501
            return data

    def add_sensor_to_telemetry_profile_with_http_info(self, telemetryprofile_id, sensor_id, **kwargs):  # noqa: E501
        """Add a new sensor to informed TelemetryProfile  # noqa: E501

        This operation is used to update some of the TelemetryProfile, including a new sensor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sensor_to_telemetry_profile_with_http_info(telemetryprofile_id, sensor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :param str sensor_id: Unique identifier of the Sensor in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telemetryprofile_id', 'sensor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_sensor_to_telemetry_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telemetryprofile_id' is set
        if ('telemetryprofile_id' not in params or
                params['telemetryprofile_id'] is None):
            raise ValueError("Missing the required parameter `telemetryprofile_id` when calling `add_sensor_to_telemetry_profile`")  # noqa: E501
        # verify the required parameter 'sensor_id' is set
        if ('sensor_id' not in params or
                params['sensor_id'] is None):
            raise ValueError("Missing the required parameter `sensor_id` when calling `add_sensor_to_telemetry_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telemetryprofile_id' in params:
            path_params['telemetryprofileId'] = params['telemetryprofile_id']  # noqa: E501
        if 'sensor_id' in params:
            path_params['sensorId'] = params['sensor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles/{telemetryprofileId}/sensor/{sensorId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_telemetry_profile(self, body, **kwargs):  # noqa: E501
        """Create new TelemetryProfile  # noqa: E501

        This operation is usedto create a new TelemetryProfile on System.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_telemetry_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTelemetryProfileRequest body: (required)
        :return: CreateTelemetryProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_telemetry_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_telemetry_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_telemetry_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new TelemetryProfile  # noqa: E501

        This operation is usedto create a new TelemetryProfile on System.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_telemetry_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTelemetryProfileRequest body: (required)
        :return: CreateTelemetryProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_telemetry_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_telemetry_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTelemetryProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_telemetry_profile(self, telemetryprofile_id, **kwargs):  # noqa: E501
        """Delete TelemetryProfile  # noqa: E501

        This operation is delete a TelemetryProfile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telemetry_profile(telemetryprofile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_telemetry_profile_with_http_info(telemetryprofile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_telemetry_profile_with_http_info(telemetryprofile_id, **kwargs)  # noqa: E501
            return data

    def delete_telemetry_profile_with_http_info(self, telemetryprofile_id, **kwargs):  # noqa: E501
        """Delete TelemetryProfile  # noqa: E501

        This operation is delete a TelemetryProfile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telemetry_profile_with_http_info(telemetryprofile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telemetryprofile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_telemetry_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telemetryprofile_id' is set
        if ('telemetryprofile_id' not in params or
                params['telemetryprofile_id'] is None):
            raise ValueError("Missing the required parameter `telemetryprofile_id` when calling `delete_telemetry_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telemetryprofile_id' in params:
            path_params['telemetryprofileId'] = params['telemetryprofile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles/{telemetryprofileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_telemetry_profile(self, telemetryprofile_id, **kwargs):  # noqa: E501
        """Get a single TelemetryProfile's info  # noqa: E501

        This operation is used to retrieve the details of a specific device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telemetry_profile(telemetryprofile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :return: GetTelemetryProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_telemetry_profile_with_http_info(telemetryprofile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_telemetry_profile_with_http_info(telemetryprofile_id, **kwargs)  # noqa: E501
            return data

    def get_telemetry_profile_with_http_info(self, telemetryprofile_id, **kwargs):  # noqa: E501
        """Get a single TelemetryProfile's info  # noqa: E501

        This operation is used to retrieve the details of a specific device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telemetry_profile_with_http_info(telemetryprofile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :return: GetTelemetryProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telemetryprofile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_telemetry_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telemetryprofile_id' is set
        if ('telemetryprofile_id' not in params or
                params['telemetryprofile_id'] is None):
            raise ValueError("Missing the required parameter `telemetryprofile_id` when calling `get_telemetry_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telemetryprofile_id' in params:
            path_params['telemetryprofileId'] = params['telemetryprofile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles/{telemetryprofileId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTelemetryProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_telemetry_profiles(self, **kwargs):  # noqa: E501
        """Get TelemetryProfiles list  # noqa: E501

        This operation is used to retrieve a list of TelemetryProfiles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_telemetry_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListTelemetryProfilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_telemetry_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_telemetry_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_telemetry_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """Get TelemetryProfiles list  # noqa: E501

        This operation is used to retrieve a list of TelemetryProfiles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_telemetry_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListTelemetryProfilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_telemetry_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTelemetryProfilesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_sensor_from_telemetry_profile(self, telemetryprofile_id, sensor_id, **kwargs):  # noqa: E501
        """remove a sensor from informed TelemetryProfile  # noqa: E501

        This operation is used to update a TelemetryProfile, removing a sensor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_sensor_from_telemetry_profile(telemetryprofile_id, sensor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :param str sensor_id: Unique identifier of the Sensor in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_sensor_from_telemetry_profile_with_http_info(telemetryprofile_id, sensor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_sensor_from_telemetry_profile_with_http_info(telemetryprofile_id, sensor_id, **kwargs)  # noqa: E501
            return data

    def remove_sensor_from_telemetry_profile_with_http_info(self, telemetryprofile_id, sensor_id, **kwargs):  # noqa: E501
        """remove a sensor from informed TelemetryProfile  # noqa: E501

        This operation is used to update a TelemetryProfile, removing a sensor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_sensor_from_telemetry_profile_with_http_info(telemetryprofile_id, sensor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :param str sensor_id: Unique identifier of the Sensor in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telemetryprofile_id', 'sensor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_sensor_from_telemetry_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telemetryprofile_id' is set
        if ('telemetryprofile_id' not in params or
                params['telemetryprofile_id'] is None):
            raise ValueError("Missing the required parameter `telemetryprofile_id` when calling `remove_sensor_from_telemetry_profile`")  # noqa: E501
        # verify the required parameter 'sensor_id' is set
        if ('sensor_id' not in params or
                params['sensor_id'] is None):
            raise ValueError("Missing the required parameter `sensor_id` when calling `remove_sensor_from_telemetry_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telemetryprofile_id' in params:
            path_params['telemetryprofileId'] = params['telemetryprofile_id']  # noqa: E501
        if 'sensor_id' in params:
            path_params['sensorId'] = params['sensor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles/{telemetryprofileId}/sensor/{sensorId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_telemetry_profile(self, body, telemetryprofile_id, **kwargs):  # noqa: E501
        """Update TelemetryProfile's attributes  # noqa: E501

        This operation is used to update some of the TelemetryProfile's attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_telemetry_profile(body, telemetryprofile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTelemetryProfileRequest body: (required)
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_telemetry_profile_with_http_info(body, telemetryprofile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_telemetry_profile_with_http_info(body, telemetryprofile_id, **kwargs)  # noqa: E501
            return data

    def update_telemetry_profile_with_http_info(self, body, telemetryprofile_id, **kwargs):  # noqa: E501
        """Update TelemetryProfile's attributes  # noqa: E501

        This operation is used to update some of the TelemetryProfile's attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_telemetry_profile_with_http_info(body, telemetryprofile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTelemetryProfileRequest body: (required)
        :param str telemetryprofile_id: Unique identifier of the TelemetryProfile in the database (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'telemetryprofile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_telemetry_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_telemetry_profile`")  # noqa: E501
        # verify the required parameter 'telemetryprofile_id' is set
        if ('telemetryprofile_id' not in params or
                params['telemetryprofile_id'] is None):
            raise ValueError("Missing the required parameter `telemetryprofile_id` when calling `update_telemetry_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telemetryprofile_id' in params:
            path_params['telemetryprofileId'] = params['telemetryprofile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/telemetryprofiles/{telemetryprofileId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
